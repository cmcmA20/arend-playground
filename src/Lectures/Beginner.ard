-----------------------------------------------------
-- Всопомогательные элементы
-----------------------------------------------------
\open Nat
\data Empty
\data Unit
  | unit

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a'
  => transport (\lam x => f a = f x) p idp
  \where
    \func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
      => coe (\lam i => B (p @ i)) b right
------------------------------------------------------
-- Различные определения по учебнику
------------------------------------------------------
-- Арифметические операции
------------------------------------------------------
-- Определение вычитания
\func \infixl 6 - (x y : Nat) : Nat \elim x, y
  | 0, 0         => 0
  | 0, suc y     => 0
  | suc x, 0     => suc x
  | suc x, suc y => x - y

-- Определение сложения
\func \infixl 6 + (x y : Nat) : Nat \elim y
  | 0     => x
  | suc y => suc (x + y)

-- Определение умножения
\func \infixl 7 * (x y : Nat) : Nat \elim y
  | 0     => 0
  | suc y => x * y + x

\func \infixl 7 div (a b : Nat) : Nat
  => div' a a b
  \where
    \func div' (i a b : Nat) : Nat \elim i
      | 0     => 0
      | suc i => if (a < b)
                 0
                 (suc (div' i (a - b) b))


-----------------------------------------------------
-- Логические операции
-----------------------------------------------------
-- Определение отрицания
\func \infixl 4 not (a : Bool) : Bool \elim a
  | true  => false
  | false => true

-- Определение логического "ИЛИ"
\func \infixl 4 or (a b : Bool) : Bool \elim a, b
  | true, _      => true
  | false, true  => true
  | false, false => false

-- Определение логического "И"
\func \infixl 4 and (a b : Bool) : Bool \elim a, b
  | true, true   => true
  | true, false  => false
  | false, _     => false

-- Определение логического равенства
\func \infix 4 == (a b : Bool) : Bool \elim a, b
  | true, true   => true
  | false, false => true
  | _, _         => false

-----------------------------------------------------
-- Операции сравнения
-----------------------------------------------------
-- Определение равенства (для натуральных)
\func \infix 4 === (a b : Nat) : Bool \elim a, b
  | 0, 0         => true
  | suc a, suc b => a === b
  | _, _         => false

-- Определение "меньше или равно"
\func \infixl 4 <= (a b : Nat) : Bool \elim a, b
  | 0, 0         => true
  | 0, suc b     => true
  | suc a, 0     => false
  | suc a, suc b => a <= b

-- Определение "строго меньше"
\func \infixl 4 < (a b : Nat) : Bool \elim a, b
  | 0, 0         => false
  | 0, suc b     => true
  | suc a, 0     => false
  | suc a, suc b => a < b

-- Определение "больше или равно"
\func \infixl 4 >= (a b : Nat) : Bool \elim a, b
  | 0, 0         => true
  | 0, suc b     => false
  | suc a, 0     => true
  | suc a, suc b => a >= b

-- Определение "строго больше"
\func \infixl 4 > (a b : Nat) : Bool \elim a, b
  | 0, 0         => false
  | 0, suc b     => false
  | suc a, 0     => true
  | suc a, suc b => a > b


-----------------------------------------------------
-- Списки
-----------------------------------------------------
-- Определение списка
\data List (A : \Type)
  | nil
  | cons A (List A)

-- Определение конкатенации списков
\func \infixl 6 ++ {A : \Type}
                   (xs ys : List A) : List A \elim xs
  | nil       => ys
  | cons a xs => cons a (xs ++ ys)


-----------------------------------------------------
-- Разные определения
-----------------------------------------------------
-- Определение Id
\func id {A : \Type} (a : A) : A => a

-- Операция присоединения элемента к началу списка
\func \infixr 8 :| { A : \Type }
                   (a : A)
                   (xs : List A) : List A => cons a xs

-- Операция ZipWith
\func ZipWith {A B C : \Type}
              (f : A -> B -> C)
              (as : List A)
              (bs : List B) : List C \elim as, bs
  | nil, nil             => nil
  | nil, _               => nil
  | _, nil               => nil
  | cons a as, cons b bs => (f a b) :| (ZipWith f as bs)


-----------------------------------------------------
-- Логические операторы для типов
-----------------------------------------------------
-- Определение типового "И"
\func \infixr 3 && (P Q : \Type) => \Sigma P Q

-- Определение типового "ИЛИ"
\data \infixr 2 || (P Q : \Type)
  | inl P
  | inr Q

-- Определение типового отрицания
\func Not (A : \Type) : \Type
  => A -> Empty

-- Определение деконструктора логического "ИЛИ"
\func ||-elim {P Q R : \Type} (l : P -> R) (r : Q -> R) (x : P || Q) : R \elim x
  | inl p => l p
  | inr q => r q

-- Интерпретации логики на типы
\func T (b : Bool) : \Type
  | true  => Unit
  | false => Empty

-- Коммутативность равенства (наверное так можно назвать)
\func inv {A : \Type} {a a' : A} (p : a = a') : a' = a \elim p
  | idp => idp
-----------------------------------------------------
-- ГЛАВА 1: Основы
-----------------------------------------------------
-- Упражнение 1:
-- Определите приоритеты функций f1, f2, f3, f4, f5 и f6,
-- чтобы функция «проверяла» проверки типов.
-----------------------------------------------------
\func \fix 2 f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 3 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6


-----------------------------------------------------
-- Упражнение 2:
-- Определите функцию if,
-- которая принимает логическое значение b
-- и два элемента произвольного типа A
-- и возвращает первый элемент,
-- когда b равно true, а второй - в противном случае.
-----------------------------------------------------
\data Bool
  | true
  | false

\func if {A : \Type} (c : Bool) (t f : A) : A \elim c
  | true  => t
  | false => f


-----------------------------------------------------
-- Упражнение 3:
-- Определить ||' через "если".
-----------------------------------------------------
\func \infix 4 ||' (a b : Bool) : Bool
  => if a a b


-----------------------------------------------------
-- Упражнение 4:
-- Определите степень
-- и факториальные функции для натуральных чисел.
-----------------------------------------------------
\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0     => suc zero
  | suc y => x ^ y * x

\func fac (x : Nat) : Nat
  | 0     => suc zero
  | suc x => (suc x) * (fac x)


-----------------------------------------------------
-- Упражнение 5:
-- Определите mod и GCD.
-----------------------------------------------------
\func \infixl 5 mod (a b : Nat) : Nat
  => mod' a a b
  \where
    \func mod' (i a b : Nat) : Nat \elim i
      | 0     => 0
      | suc i => if (a < b)
                    (a)
                    (mod' i (a - b) b)

\func gcd (a b : Nat) : Nat
  => gcd' a a b
  \where
    \func gcd' (i a b : Nat) : Nat \elim i
      | 0     => 0
      | suc i => if (b === 0)
                    a
                    (gcd' i b (a mod b))


-----------------------------------------------------
-- Упражнение 6:
-- Определите функцию "map".
-----------------------------------------------------
\func map {A B : \Type}
          (f : A -> B)
          (xs : List A) : List B \elim xs
  | nil       => nil
  | cons a xs => (cons (f a) (map f xs))


-----------------------------------------------------
-- Упражнение 7:
-- Определите функцию транспонирования.
-- Она берет список списков,
-- рассматриваемых как матрицу,
-- и возвращает список списков,
-- который представляет транспонированную матрицу.
-----------------------------------------------------
\func transpose {A : \Type}
                (xss : List (List A)) : List (List A) \elim xss
  | nil         => nil
  | cons xs nil => map (\lam x => x :| nil) xs
  | cons xs xss => ZipWith (:|) xs (transpose xss)


-----------------------------------------------------
-- ГЛАВА 2: Высказывания и доказательства
-----------------------------------------------------
-- Упражнение 1:
-- Докажите, что (P -> Q -> R) -> (P -> Q) -> P -> R.
-----------------------------------------------------
\func ch2_Ex1 {P Q R : \Type}
              (f : P -> Q -> R)
              (g : P -> Q)
              (x : P) : R
  => f x (g x)


-----------------------------------------------------
-- Упражнение 2:
-- Докажите, что ((P -> Q -> R) -> P) -> (P -> R) -> R.
-----------------------------------------------------
\func ch2_Ex2 {P Q R : \Type}
              (f : (P -> Q -> R) -> P)
              (g : P -> R) : R
  => g (f (\lam p _ => g p))


-----------------------------------------------------
-- Упражнение 3:
-- Докажите, что ((P && Q) -> R) -> P -> Q -> R.
-----------------------------------------------------
\func ch2_Ex3 {P Q R : \Type}
              (f : (P && Q) -> R)
              (x : P)
              (y : Q) : R
  => f (x,y)


-----------------------------------------------------
-- Упражнение 4:
-- Докажите, что (P -> Q -> R) -> (P && Q) -> R.
-----------------------------------------------------
\func ch2_Ex4 {P Q R : \Type}
              (f : P -> Q -> R)
              (x : P && Q) : R
  => f (x.1) (x.2)


-----------------------------------------------------
-- Упражнение 5:
-- Докажите, что (P -> R) -> (Q -> R) -> P || Q -> R.
-----------------------------------------------------
\func ch2_Ex5 {P Q R : \Type}
              (f : P -> R)
              (g : Q -> R)
              (x : P || Q) : R \elim x
  | inl p => f p
  | inr q => g q


-----------------------------------------------------
-- Упражнение 6:
-- Докажите, что ((P || Q) -> (P && Q)) -> ((P -> Q) && (Q -> P)).
-----------------------------------------------------
\func ch2_Ex6 {P Q R : \Type}
              (f : (P || Q) -> (P && Q)) : (P -> Q) && (Q -> P)
  => ((\lam x => (f (inl x)).2), (\lam x => (f (inr x)).1))


-----------------------------------------------------
-- Упражнение 7:
-- Парадокс Рассела показывает,
-- что не существует множества всех множеств.
-- Если такое множество существует,
-- то мы можем сформировать множество B множеств,
-- которые не являются членами самих себя.
-- Тогда B принадлежит себе тогда и только тогда,
-- когда это не так. Это подразумевает противоречие.
-- Теорема Кантора утверждает, что не существует множества X
-- с сюрьекцией из X на множество подмножеств X.
-- Его доказательство также создает утверждение,
-- которое истинно тогда и только тогда, когда оно ложно.
-- Докажите, что в более общем смысле
-- существование любого такого предложения подразумевает противоречие.
-----------------------------------------------------
\func ch2_Ex7 {A : \Type}
              (f : A -> (A -> Empty))
              (g : (A -> Empty) -> A) : Empty
  => f (g (\lam x => f x x)) (g (\lam x => f x x))


-----------------------------------------------------
-- Упражнение 8:
-- Докажите, что если для каждого x : Nat, P равен true,
-- то существует x : Nat такой, что P x равен true.
-----------------------------------------------------
\func ch2_Ex8 {P : Nat -> \Type}
              (f : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x)
  => (0, f 0)


-----------------------------------------------------
-- Упражнение 9:
-- Докажите, что если нет x : Nat такого,
-- что P x выполняется, то P 3 ложно.
-----------------------------------------------------
\func ch2_Ex9 {P : Nat -> \Type}
              (f : Not (\Sigma (x : Nat) (P x))) : Not (P 3)
  => \lam x => f (3, x)


-----------------------------------------------------
-- Упражнение 10:
-- Докажите, что если для каждого x : Nat
-- P x подразумевает Q x,
-- то существование элемента x: Nat,
-- для которого P x истинно,
-- подразумевает существование элемента x: Nat,
-- для которого Q x истинно.
-----------------------------------------------------
\func ch2_Ex10 {P Q : Nat -> \Type}
               (f : \Pi (x : Nat) -> (P x -> Q x))
               : \Sigma (x : Nat) (P x) -> \Sigma (x : Nat) (Q x)
  => \lam x => (x.1, f x.1 x.2)


-----------------------------------------------------
-- Упражнение 11:
-- Докажите, что если для каждого x : Nat либо P x ложно,
-- либо Q x ложно, то P 3 подразумевает, что Q 3 ложно.
-----------------------------------------------------
\func ch2_Ex11 {P Q : Nat -> \Type}
              (f : \Pi (x : Nat) -> Not (P x) || Not (Q x))
              : (P 3) -> Not (Q 3)
  => \lam x => \lam y => ||-elim (\lam z => z x) (\lam z => z y) (f 3)


-----------------------------------------------------
-- Упражнение 12:
-- Докажите ассоциативность "И" и "ИЛИ".
-----------------------------------------------------
\func ch2_Ex12-or (x y z : Bool) : x or y or z = x or (y or z) \elim x, y, z
  | true, true, true    => idp
  | true, true, false   => idp
  | true, false, true   => idp
  | true, false, false  => idp
  | false, true, true   => idp
  | false, true, false  => idp
  | false, false, true  => idp
  | false, false, false => idp

\func ch2_Ex12-and (x y z : Bool) : x and y and z = x and (y and z) \elim x, y, z
  | true, true, true    => idp
  | true, true, false   => idp
  | true, false, true   => idp
  | true, false, false  => idp
  | false, true, true   => idp
  | false, true, false  => idp
  | false, false, true  => idp
  | false, false, false => idp


-----------------------------------------------------
-- Упражнение 13:
-- Докажите, что 2 * 2 равно 4.
-----------------------------------------------------
\func ch2_Ex13 : 2 * 2 = 4 => idp


-----------------------------------------------------
-- Упражнение 14:
-- Докажите ассоциативность конкатенации списков.
-----------------------------------------------------
\func ch_Ex14 {A : \Type}
              (xs ys zs : List A)
              : xs ++ ys ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | cons a xs => pmap (cons a) (ch_Ex14 xs ys zs)

\func nil+xs {A : \Type}
             (xs : List A) : nil ++ xs = xs \elim xs
  | nil       => idp
  | cons a xs => idp

\func xs+nil {A : \Type}
             (xs : List A) : xs ++ nil = xs \elim xs
  | nil       => idp
  | cons a xs => pmap (cons a) (xs+nil xs)


-----------------------------------------------------
-- Дополнительные от Паши
-----------------------------------------------------
\func one : Nat => suc zero

\func null-plus-right (x : Nat) : x + 0 = x \elim x
  | 0     => idp
  | suc x => idp

\func null-plus-left (x : Nat) : 0 + x = x \elim x
  | 0     => idp
  | suc x => pmap (suc) (null-plus-left x)

\func null-multi-right (x : Nat) : x * 0 = 0 \elim x
  | 0     => idp
  | suc x => idp

\func null-multi-left (x : Nat) : 0 * x = 0 \elim x
  | 0     => idp
  | suc x => null-multi-left x

\func one-neutral-right (x : Nat) : x * one = x \elim x
  | 0     => idp
  | suc x => pmap (suc) (null-plus-left x)

\func one-neutral-left (x : Nat) : one * x = x \elim x
  | 0     => idp
  | suc x => pmap (suc) (one-neutral-left x)

\func +-assoc (x y z : Nat) : x + y + z = x + (y + z) \elim z
  | zero  => idp
  | suc z => pmap suc (+-assoc x y z)

\func suc-+-comm (x y : Nat) : suc (x + y) = suc x + y \elim y
  | 0 => idp
  | suc y => pmap (suc) (suc-+-comm x y)

-- | (a * b) * c = a * (b * c)
-- \func *-assoc (a b c : Nat) : a * b * c = a * (b * c) \elim a, c

-- | a * b = b * a
-- \func *-comm (a b : Nat) : a * b = b * a \elim a

-- | a * (b + c) = a * b + a * c
-- \func *-+-distrib-left : {?} => {?}

-- | (a + b) * c = a * c + b * c
-- \func *-+-distrib-right : {?} => {?}


