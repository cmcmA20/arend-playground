-------------------------------------------------
-- Records: \new, \cowith, projections, pattern matching
-------------------------------------------------

\func natpair => \Sigma Nat Nat

\data NatPair
  | natPair (n : Nat) (m : Nat)

\func natFst (p : NatPair) : Nat
  | natPair x _ => x

\func natSnd (p : NatPair) : Nat
  | natPair _ y => y

\record NatPair'
  | fst : Nat
  | snd : Nat

-- fst : \Pi {x : NatPair'} -> Nat
\func foo (p : NatPair') => fst {p}

\func foo' (p : NatPair') => NatPair'.fst {p}

\func bar (p : NatPair') => p.snd

-- (f x).snd -- This is not allowed. It can be replaced with one of the following variants:
-- \let e : NatPair' => f x \in e.snd
-- snd {f x}

-- This code will not typecheck since the type of p is not specified explicitly
-- \func baz {p p' : NatPair'} (q : p = p') => pmap (\lam p => p.fst) q

\func zeroPair => \new NatPair' {
  | fst => 0
  | snd => 0
}

\func etaNatPair' (p : NatPair') : p = \new NatPair' { | fst => p.fst | snd => p.snd }
  => idp

\func \infixl 6 + (x y : Nat) : Nat \elim y
  | 0 => x
  | suc y => suc (x + y)

\func sum (p : NatPair') => fst {p} + p.snd

\func sum' (p : NatPair') : Nat
  | (a, b) => a + b

-- This function is equivalent to zeroPair defined above.
-- \cowith is followed with a set of clauses, each starting
-- with | and specifying a field and its value
\func zeroPair' : NatPair' \cowith
  | fst => 0
  | snd => 0

\record Pair (A B : \Type)
  | fst' : A
  | snd' : B

-- Using \cowith and field access.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst' => p.snd'
  | snd' => p.fst'

-- Using \new and pattern matching.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a, b) => \new Pair {
    | fst' => b
    | snd' => a
  }

-- Using \new and field access.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A
  => \new Pair { | fst' => p.snd' | snd' => p.fst' }

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p
  => idp

-------------------------------------------------
-- Partial implementation
-------------------------------------------------

\func PartialEx : \Type => NatPair' { | fst => 0 }

\func ppp : NatPair' { | fst => 0 } => \new NatPair' { | snd => 1 }


\func partial (p : NatPair' { | fst => 0 | snd => 1 }) : PartialEx => p

\func PartialEx' => NatPair' { | fst => 3 | snd => 7 }

\func new => \new PartialEx'

-------------------------------------------------
-- Parameters visibility of fields
-------------------------------------------------

\func pairExample : Pair Nat (Nat -> Nat)
  => \new Pair { | fst' => 1 | snd' (x : Nat) => x }

\func pairExample'
  => \new Pair { | A => Nat | B => Nat -> Nat | fst' => 1 | snd' (x : Nat) => x }

\func pairExample''
  => \new Pair Nat (Nat -> Nat) 1 (\lam (x : Nat) => x)

\record NatPair'' (fst'' snd'' : Nat)

\func natPair''ex => \new NatPair'' {
  | fst'' => 0
  | snd'' => 0
}

\record Pair''
  | A : \Type
  | B : \Type
  | fst'' : A
  | snd'' : B

-------------------------------------------------
-- Dependent records, a type of positive natural numbers
-------------------------------------------------

\data Bool | true | false

-- compare this definition of T with the one in module Basics
\data T (b : Bool) \with
  | true => tt

\func isPos (n : Nat) : Bool
  | 0     => false
  | suc _ => true

\record PosNat (n : Nat) (p : T (isPos n))

\data Empty

\func zero-isNotPos (p : PosNat 0) : Empty
  => \case p.p \with {}

\func one-isPos : PosNat 1 => \new PosNat { | p => tt }

\func gcd (n m : Nat) : Nat => {?}

\record Coprimes (n m : Nat) (p : gcd n m = 1)

\data CoprimesTo60
  | cpt60 (x : Coprimes { | n => 60 } )

-------------------------------------------------
-- Monoid
-------------------------------------------------

\class Monoid (A : \Type)
  | ide : A
  | \infixl 7 * : A -> A -> A
  | *-assoc (x y z : A) : (x * y) * z = x * (y * z)
  -- | *-assoc : \Pi (x y z : A) -> (x * y) * z = x * (y * z)
  | ide-left (x : A) : ide * x = x
  | ide-right (x : A) : x * ide = x

\func baz (m : Monoid Nat 0 (Nat.+)) => m.*-assoc

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a)
  => coe (\lam i => B (p @ i)) b right

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\class CommMonoid \extends Monoid
  | *-comm (x y : A) : x * y = y * x
  | ide-right x => *-comm x ide *> ide-left x
-- ide-right follows from id-left for commutative monoids

-------------------------------------------------
-- Classes, instances
-------------------------------------------------

\instance +-NatMonoid : Monoid Nat
  | ide => 0
  | * => Nat.+
  | *-assoc => {?}
  | ide-left => {?}
  | ide-right => {?}

\instance *-NatMonoid : Monoid Nat
  | ide => 1
  | * => Nat.*
  | *-assoc => {?}
  | ide-left => {?}
  | ide-right => {?}

-- alternative definition of the latter:
\instance *-NatMonoid' : Monoid Nat 1 (Nat.*) {?} {?} {?}

-- ok, +-NatMonoid is inferred since it was declared the first
-- id-left x here is equivalent to id-left {+-NatMonoid} x
\func +-test (x : Nat) : 0 Nat.+ x = x => ide-left x
-- error, because +-NatMonoid is inferred, not *-NatMoniod
-- \func *-test (x : Nat) : 1 Nat.* x = x => id-left x

\func instEx => +-NatMonoid.ide-left

\func instExF (M : Monoid) => M.ide

\func instEx' => instExF +-NatMonoid

\class Eq (A : \Type)
  | \infix 3 == (x y : A) : Bool

-- function refl from Haskell can be defined in two ways
-- refl :: Eq a => a -> Bool
-- refl x = x == x
\func refl {A : \Type} {e : Eq A} (a : A) : Bool => a == a

\func refl' {E : Eq} (a : E) => a == a

-- \func xxxx => refl 1

-------------------------------------------------
-- Coercions
-------------------------------------------------

\func CF-coerce (M : Monoid) (x : M) => x

\data XXX | con

\data YYY | con' XXX Nat | con''
  \where {
    -- We can define coercions TO this type.
    -- The return type of the function must be YYY.
    \use \coerce fromXXX (x : XXX) => con' x 0

    -- We can also define coercions FROM this type.
    -- The type of the last parameter of the function must
    -- be YYY.
    \use \coerce toXXX (y : YYY) => con
  }

\func fff (y : YYY) => y

-- Elements of type XXX are implicitly converted to type YYY by function fromXXX.
\func ggg => fff con

-- Implicit convertion from Nat to Int is done in this way:
\func hhh : Int => 0

-------------------------------------------------
-- Extensions, diamond problem
-------------------------------------------------

\record Base (A : \Type)

\record Base' (A : \Type)

\record X \extends Base
  | a : A

\record Y \extends Base'
  | b : A

\record Z \extends X, Y

\func zzz => \new Z {
  | A => {?}
  | a => {?}
  | Base'.A => {?}
  | b => {?}
}

\func zzzz (z : Z) => Base'.A {z}

\record X' \extends Base
  | aa : A

\record Y' \extends Base
  | bb : A

-- Z' has three fields: aa, bb, A
\record Z' \extends X', Y'

\class CommMonoid' \extends Monoid {
  | comm (x y : A) : x * y = y * x
  | ide-right x => comm x ide *> ide-left x
}

\class AbGroup \extends CommMonoid' {
  | inverse : A -> A
  | inv-left (x : A) : inverse x * x = ide
  | inv-right (x : A) : x * inverse x = ide
}

-- We omit distributivity
\class Ring \extends AbGroup
  | mulMonoid : Monoid A

-- This is not a correct way to define the class Ring:
-- the structures of addition and multiplication coincide.
-- \class Ring \extends AbGroup, Monoid'

-- This class does not extend Monoid
\class AbGroup' (A : \Type) {
  -- Here all the fields of Monoid, CommMonoid and AbGroup
  -- should be repeated
}

\class Ring' \extends AbGroup', Monoid
  | Monoid.A => AbGroup'.A -- make sure that classifying fields coincide

-------------------------------------------------
-- Classes without classifying fields
-------------------------------------------------

-- Implementations are omitted

\func isInj {A B : \Type} (f : A -> B) : \Type => {?}

\func isSur {A B : \Type} (f : A -> B) : \Type => {?}

\func isBij {A B : \Type} (f : A -> B) : \Type => {?}

\func IsInj+isSur=>isBij {A B : \Type} (f : A -> B) (p : isInj f) (q : isInj f) : isBij f => {?}

\func IsBij=>isInj {A B : \Type} (f : A -> B) (p : isBij f) : isInj f => {?}

\func IsBij=>isSur {A B : \Type} (f : A -> B) (p : isBij f) : isSur f => {?}

\class Map \noclassifying {A B : \Type} (f : A -> B) {
  \func isInj : \Type => {?}

  \func isSur : \Type => {?}

  \func isBij : \Type => {?}

  \func isInj+isSur=>isBij (p : isInj) (q : isInj) : isBij => {?}

  \func isBij=>isInj (p : isBij) : isInj => {?}

  \func isBij=>isSur (p : isBij) : isSur => {?}
}

\func isInj+isSur<=>isBij (m : Map) : \Sigma (isBij -> \Sigma isInj isSur) (\Sigma isInj isSur -> isBij)
  => ((\lam p => (isBij=>isInj p, isBij=>isInj p)), (\lam p => isInj+isSur=>isBij p.1 p.2))
  \where \open Map

\func id-isInj {A : \Type} : Map.isInj {\new Map (\lam (a : A) => a)} => {?}

\class Endo \extends Map {
  | B => A

  \func isIdem => \Pi (x : A) -> f (f x) = f x

  \func isInv => \Pi (x : A) -> f (f x) = x

  \func isIdem+isInv=>id (p : isIdem) (q : isInv) : f = (\lam x => x) => {?}
}

-------------------------------------------------
-- Functor
-- not really
-------------------------------------------------

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (x : F A) : fmap (\lam (a : A) => a) x = x
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (x : F A)
    : fmap (\lam a => g (f a)) x = fmap g (fmap f x)

-- \func functorCompClosed {F G : \Type -> \Type} (funF : Functor F) (funG : Functor G) : Functor (\lam w => G (F w)) \cowith {
--   | fmap f => funG.fmap (funF.fmap f)
--   | fmap-id x => {?}
--   | fmap-comp f g x => {?}
-- }
--
-- \class NatTrans \noclassifying {F G : \Type -> \Type} (funF : Functor F) (funG : Functor G)
--   | component (A : \Type) : F A -> G A
--   | naturality (A B : \Type) (f : A -> B) (x : F A) : funG.fmap f (component A x) = component B (funF.fmap f x)

-- hmmm
-- \class NatIso \noclassifying {F G : \Type -> \Type} (funF : Functor F) (funG : Functor G)
--   | niComponent (A : \Type) : F A = G A

\class Pointed \extends Functor
  | pure {A : \Type} (a : A) : F A
  | fmap-pure {A B : \Type} (f : A -> B) (a : A) : fmap f (pure a) = pure (f a)

\class Applicative \extends Pointed
  | \infixl 6 <*> {A B : \Type} : F (A -> B) -> F A -> F B
  | pure-id {A : \Type} (x : F A) : pure (\lam (x : A) => x) <*> x = x
  | pure-hom {A B : \Type} (f : A -> B) (a : A) : pure f <*> pure a = pure (f a)
  | pure-interchange {A B : \Type} (u : F (A -> B)) (a : A) : u <*> pure a = pure (\lam (v : A -> B) => v a) <*> u
  | pure-comp {A B C : \Type} (u : F (B -> C)) (v : F (A -> B)) (x : F A)
    : pure (\lam (f : B -> C) (g : A -> B) (a : A) => f (g a)) <*> u <*> v <*> x = u <*> (v <*> x)
  | pure-fmap {A B : \Type} (f : A -> B) (x : F A) : fmap f x = pure f <*> x

\class Monad' \extends Applicative
  | join' {A : \Type} : F (F A) -> F A
  | join-nat' {A B : \Type} (f : A -> B) (x : F A) : join' (fmap (fmap f) (pure x)) = fmap f (join' (pure x))
  | join-left-unit' {A : \Type} (x : F A) : join' (fmap pure x) = join' (pure x)
  | join-right-unit' {A : \Type} (x : F A) : join' (pure x) = x
  | join-assoc' {A : \Type} (x : F A): join' (fmap join' (pure (pure x))) = join' (join' (pure (pure x)))

\data Id (A : \Type) : \Type
  | unId (a : A)

\record IdId {A : \Type} (tau : Id (Id A))

\func idfmap {A B : \Type} (f : A -> B) (x : Id A) : Id B \elim x
  | unId a => unId (f a)

\instance IdIsFunctor : Functor Id
  | fmap => idfmap
  | fmap-id x => \case \elim x \with {
    | unId a => idp
  }
  | fmap-comp f g x => \case \elim x \with {
    | unId a => idp
  }

\instance IdIsPointed : Pointed Id
  | fmap => fmap
  | fmap-id => fmap-id
  | fmap-comp => fmap-comp
  | pure a => unId a
  | fmap-pure f a => idp

\func idap {A B : \Type} (u : Id (A -> B)) (x : Id A) : Id B \elim u, x
  | unId f, unId a => unId (f a)

\instance IdIsApplicative : Applicative Id
  | fmap => fmap
  | fmap-id => fmap-id
  | fmap-comp => fmap-comp
  | pure => pure
  | fmap-pure => fmap-pure
  | <*> => idap
  | pure-id x => \case \elim x \with {
    | unId a => idp
  }
  | pure-hom f a => idp
  | pure-interchange u a => \case \elim u \with {
    | unId f => idp
  }
  | pure-comp u v x => \case \elim u \with {
    | unId f => \case \elim v \with {
      | unId g => \case \elim x \with {
        | unId a => idp
      }
    }
  }
  | pure-fmap f x => \case \elim x \with {
    | unId a => idp
  }

\func idjoin {A : \Type} (xx : Id (Id A)) : Id A
  | unId x => x

\instance IdIsMonad' : Monad' Id
  | fmap => fmap
  | fmap-id => fmap-id
  | fmap-comp => fmap-comp
  | pure => pure
  | fmap-pure => fmap-pure
  | <*> => <*>
  | pure-id => pure-id
  | pure-hom => pure-hom
  | pure-interchange => pure-interchange
  | pure-comp => pure-comp
  | pure-fmap => pure-fmap
  | join' => idjoin
  | join-nat' f x => idp
  | join-left-unit' x => \case \elim x \with {
    | unId a => idp
  }
  | join-right-unit' x => idp
  | join-assoc' x => idp

\data Maybe (A : \Type)
  | nothing
  | just (a : A)

\func maybefmap {A B : \Type} (f : A -> B) (x : Maybe A) : Maybe B \elim x
  | nothing => nothing
  | just a => just (f a)

\func maybeap {A B : \Type} (u : Maybe (A -> B)) (x : Maybe A) : Maybe B \elim u, x
  | just f , just a  => just (f a)
  | _      , _       => nothing

\func maybejoin {A : \Type} (xx : Maybe (Maybe A)) : Maybe A
  | nothing => nothing
  | just x  => x

\instance MaybeIsMonad : Monad' Maybe
  | fmap => maybefmap
  | fmap-id x => \case \elim x \with {
    | nothing => idp
    | just a  => idp
  }
  | fmap-comp f g x => \case \elim x \with {
    | nothing => idp
    | just a  => idp
  }
  | pure => just
  | fmap-pure f a => idp
  | <*> => maybeap
  | pure-id x => \case \elim x \with {
    | nothing => idp
    | just a  => idp
  }
  | pure-hom f a => idp
  | pure-interchange u a => \case \elim u \with {
    | nothing => idp
    | just f  => idp
  }
  | pure-comp u v x => \case \elim u \with {
    | nothing => idp
    | just f  => \case \elim v \with {
      | nothing => idp
      | just g  => \case \elim x \with {
        | nothing => idp
        | just a  => idp
      }
    }
  }
  | pure-fmap f x => \case \elim x \with {
    | nothing => idp
    | just a  => idp
  }
  | join' => maybejoin
  | join-nat' f x => idp
  | join-left-unit' x => \case \elim x \with {
    | nothing => idp
    | just a  => idp
  }
  | join-right-unit' x => idp
  | join-assoc' x => idp

-- this one feels much easier to prove with than the State'
\record State (S A : \Type)
  | state : S -> \Sigma S A

\func stateEq {S A :\Type} {x y : State S A} (p : x.state = y.state) : x = y
  => path (\lam i => \new State S A (p @ i))

\func statefmap {S A B : \Type} (f : A -> B) (x : State S A) : State S B \cowith
  | state => \lam s => \let (s', a) => x.state s \in (s', f a)

\func stateap {S A B : \Type} (u : State S (A -> B)) (x : State S A) : State S B \cowith
  | state => \lam s =>
      \let | w => u.state s
           | z => x.state (w.1)
       \in (z.1, w.2 z.2)

\func statejoin {S A : \Type} (xx : State S (State S A))  : State S A \cowith
  | state => \lam s =>
      \let w => xx.state s
       \in (state {w.2}) (w.1)

\instance StateIsMonad {S : \Type} : Monad' (\lam A => State S A)
  | fmap => statefmap
  | fmap-id x => idp
  | fmap-comp f g x => idp
  | pure a => \new State { | state => \lam s => (s, a)}
  | fmap-pure f a => idp
  | <*> => stateap
  | pure-id x => idp
  | pure-hom f a => idp
  | pure-interchange u a => idp
  | pure-comp u v x => idp
  | pure-fmap f x => idp
  | join' => statejoin
  | join-nat' f x => idp
  | join-left-unit' x => idp
  | join-right-unit' x => idp
  | join-assoc' x => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\func state'fmapUnderMap {S A B : \Type} (f : A -> B) (x : State' S A) : S -> \Sigma S B \elim x
  | state' q => \lam s => ((q s).1, f (q s).2)

\func state'fmap {S A B : \Type} (f : A -> B) (x : State' S A) : State' S B
  => state' (state'fmapUnderMap f x)

\func state'ap {S A B : \Type} (u : State' S (A -> B)) (x : State' S A) : State' S B
  | state' p, state' q => state' (\lam s => \let | (s', f) => p s | (s'', a) => q s' \in (s'', f a))

\func state'joinUnderMap {S A : \Type} (xx : State' S (State' S A)) : S -> \Sigma S A \elim xx
  | state' x =>
    \lam s => \let w : \Sigma S (State' S A) => x s \in \case \elim w \with { | (s', state' p) => p s'}

\func state'join {S A : \Type} (xx : State' S (State' S A))  : State' S A
  => state' (state'joinUnderMap xx)

\instance State'IsMonad {S : \Type} : Monad' (\lam A => State' S A)
  | fmap => state'fmap
  | fmap-id {A} x => \case \elim x \with {
    | state' q => idp
  }
  | fmap-comp f g x => \case \elim x \with {
    | state' q => idp
  }
  | pure a => state' (\lam s => (s, a))
  | fmap-pure f a => idp
  | <*> => state'ap
  | pure-id x => \case \elim x \with {
    | state' q => idp
  }
  | pure-hom f a => idp
  | pure-interchange u a => \case \elim u \with {
    | state' p => idp
  }
  | pure-comp u v x => \case \elim u \with {
    | state' p => \case \elim v \with {
      | state' q => \case \elim x \with {
        | state' r => idp
      }
    }
  }
  | pure-fmap f x => \case \elim x \with {
    | state' q => idp
  }
  | join' => state'join
  | join-nat' f x => \case \elim x \with {
    | state' p => idp
  }
  | join-left-unit' x => \case \elim x \with {
    | state' p => idp
  }
  | join-right-unit' x => \case \elim x \with {
    | state' p => idp
  }
  | join-assoc' x => idp