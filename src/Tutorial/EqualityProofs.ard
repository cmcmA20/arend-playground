\open I
\open Nat
\import Tutorial.Equality

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func +-comm (n m : Nat) : n + m = m + n
  | 0    , 0     => idp
  | 0    , suc m => pmap suc (+-comm 0 m)
  | suc n, 0     => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (inv (+-comm n m)) *> +-comm n (suc m))

\func \fix 2 qed {A : \Type} (a : A) : a = a => idp

\func \infixr 1 >== {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') => p *> q

\func \infix 2 ==< {A : \Type} (a : A) {a' : A} (p : a = a') => p

\func +-comm' (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | suc n, 0 => pmap suc (+-comm' n 0)
  | 0, suc m => pmap suc (+-comm' 0 m)
  | suc n, suc m => pmap suc (
      suc n + m   ==< +-comm' (suc n) m >==
      suc (m + n) ==< pmap suc (inv (+-comm' n m)) >==
      suc (n + m) ==< +-comm' n (suc m) >==
      suc m + n `qed
  )

\func transport'
  {A : \Type}
  (B : A -> \Type)
  {a a' : A} (p : a = a')
  (b : B a)
  : B a'
  => coe (\lam i => B (p @ i)) b right

\func psqueeze  {A : \Type} {a a' : A} (p : a = a') (i : I) : a = p @ i
  => path (\lam j => p @ squeeze i j)

\func J
  {A : \Type} {a : A}
  (B : \Pi (a' : A) -> a = a' -> \Type)
  {a' : A} (p : a = a')
  (b : B a idp)
  : B a' p
  -- the details of the definition are not important for now
  => coe0 (\lam i => B (p @ i) (psqueeze p i)) b

-- | Streicher's K is unprovable in HoTT-I
\func K {A : \Type} {a : A} (B : a = a -> \Type)
        (b : B idp)
        (p : a = a) : B p => {?}

\func transportPM {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' \elim p
  | idp => b

\func Jalt
  {A : \Type}
  (B : \Pi (a a' : A) -> a = a' -> \Type)
  (b : \Pi (a : A) -> B a a idp)
  {a a' : A} (p : a = a')
  : B a a' p
  => coe0 (\lam i => B a (p @ i) (psqueeze p i)) (b a)

\func JaltViaJ {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
               (b : \Pi (a : A) -> B a a idp)
               {a a' : A} (p : a = a') : B a a' p
  => J (B a) p (b a)

-- FIXME use Jalt, this is garbage
\func transportAlt {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
  => \let | W => coe0 (\lam i => B (p @ i)) (Jalt (\lam x y q => B a) (\lam x => b) p)
      \in W

\func sigma-contr {A : \Type} {a : A} (r : \Sigma (x : A) (p : a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} r \elim r
  | (x, p) => coe0 (\lam i => (a, idp) = {\Sigma (x : A) (a = x)} (p @ i, psqueeze p i)) idp

\func JViaJalt {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
               {a' : A} (p : a = a')
               (b : B a idp) : B a' p
  => transportAlt (\lam z => B z.1 z.2) (sigma-contr (a', p)) b

\data Vec (A : \Type) (n : Nat) \elim n
  | zero => vnil
  | suc n => vcons A (Vec A n)

\func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m + n) \elim n, xs
  | 0, vnil => ys
  | suc n, vcons x xs => vcons x (xs v++ ys)

\func v++-assoc {A : \Type} {n m k : Nat} (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : (xs v++ ys) v++ zs = transport (Vec A) (+-assoc k m n) (xs v++ (ys v++ zs)) \elim n, xs
  | 0    , vnil       => idp
  | suc n, vcons x xs =>
    pmap (vcons x) (v++-assoc xs ys zs) *>
    inv (transport-vcons-comm (+-assoc k m n) x (xs v++ (ys v++ zs)))
  \where
    -- transport commutes with all constructors
    -- here is the proof that it commutes with vcons
    \func transport-vcons-comm {A : \Type} {n m : Nat} (p : n = m) (x : A) (xs : Vec A n)
      : transport (Vec A) (pmap suc p) (vcons x xs) = vcons x (transport (Vec A) p xs)
      | idp, _, _ => idp
{- This function can be defined with J as follows:
=> J (\lam m' p' => transport (Vec A) (pmap suc p') (vcons x xs) = vcons x (transport (Vec A) p' xs))
     idp
     p
-}

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0    , vnil       => idp
  | suc n, vcons x xs => v++-assoc.transport-vcons-comm (+-comm 0 n) x (xs v++ vnil) *> pmap (vcons x) (vnil-rightId xs)

\func LessOrEq''' (n m : Nat) => \Sigma (k : Nat) (k + n = m)

-- \data Empty

\data Unit | unit

-- Recursive definition of <=.
\func lessOrEq (n m : Nat) : \Type
  | 0    , _     => Unit
  | suc _, 0     => Empty
  | suc n, suc m => lessOrEq n m

-- First inductive definition of <=.
\data LessOrEq (n m : Nat) \with
  | 0    , m     => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func test11 : LessOrEq 0 100 => z<=n
\func test12 : LessOrEq 3 67 => s<=s (s<=s (s<=s z<=n))
-- Of course, there is no proof of 1 <= 0.
-- \func test10 : LessOrEq 1 0 => ....

-- Second inductive definition of <=.
-- This is a modification of the first inductive definition,
-- where we avoid constructor patterns.
\data LessOrEq' (n m : Nat)
  | z<=n' (n = 0)
  | s<=s' {n' m' : Nat} (n = suc n') (m = suc m') (LessOrEq' n' m')

-- Third inductive definition of <=.
\data LessOrEq'' (n m : Nat) \elim m
  | suc m => <=-step (LessOrEq'' n m)
  | m     => <=-refl (n = m)

\func n<=n {n : Nat} : lessOrEq n n
  | {0}     => unit
  | {suc _} => n<=n

\func leq01 {n m : Nat} (p : lessOrEq n m) : LessOrEq n m \elim n, m, p
  | 0    , 0    , unit => z<=n
  | 0    , suc _, unit => z<=n
  | suc _, suc _, p    => s<=s (leq01 p)

\func leq12 {n m : Nat} (p : LessOrEq n m) : LessOrEq' n m
  | {0}    , {0}    , z<=n   => z<=n' idp
  | {0}    , {suc _}, z<=n   => z<=n' idp
  | {suc _}, {suc _}, s<=s p => s<=s' idp idp (leq12 p)

\func Z (n : Nat) : \Type
  | 0     => Unit
  | suc _ => Empty

\func n''<=n'' {n : Nat} : LessOrEq'' n n
  | {0}     => <=-refl idp
  | {suc _} => <=-refl idp

\func n''<=sucm'' {n m : Nat} (p : LessOrEq'' n m) : LessOrEq'' n (suc m)
  | {0}    , {0}    , <=-refl p => <=-step (<=-refl p)
  | {0}    , {suc _}, <=-step p => <=-step (n''<=sucm'' p)
  | {0}    , {suc m}, <=-refl p => absurd (transport Z p unit)
  | {suc _}, {0}    , <=-refl p => absurd (transport Z (inv p) unit)
  | {suc _}, {suc _}, <=-step p => <=-step (n''<=sucm'' p)
  | {suc _}, {suc m}, <=-refl p => <=-step (transport (\lam z => LessOrEq'' z (suc m)) (inv p) n''<=n'')

\func sucn''<=sucm'' {n m : Nat} (p : LessOrEq'' n m) : LessOrEq'' (suc n) (suc m)
  | {0}    , {0}    , <=-refl _ => <=-refl idp
  | {0}    , {suc _}, <=-step p => n''<=sucm'' (sucn''<=sucm'' p)
  | {0}    , {suc _}, <=-refl p => absurd (transport Z p unit)
  | {suc _}, {0}    , <=-refl p => absurd (transport Z (inv p) unit)
  | {suc _}, {suc _}, <=-step p => <=-step (sucn''<=sucm'' p)
  | {suc _}, {suc _}, <=-refl p => <=-refl (pmap suc p)

\func leq23 {n m : Nat} (p : LessOrEq' n m) : LessOrEq'' n m
  | {0}    , {0}    , z<=n' _     => <=-refl idp
  | {0}    , {0}    , s<=s' _ _ _ => <=-refl idp
  | {0}    , {suc _}, z<=n' p     => <=-step (leq23 (z<=n' p))
  | {0}    , {suc _}, s<=s' _ _ _ => <=-step (leq23 (z<=n' idp))
  | {suc _}, {0}    , z<=n' p     => <=-refl p
  | {suc _}, {0}    , s<=s' p q r => absurd (transport Z q unit)
  | {suc _}, {suc _}, z<=n' p     => absurd (transport Z (inv p) unit)
  | {suc _}, {suc _}, s<=s' p q r =>
    \let | u => inv (suc-inj p)
         | v => inv (suc-inj q)
     \in sucn''<=sucm'' (leq23 (transport (\lam z => LessOrEq' z.1 z.2) (path (\lam i => (u @ i, v @ i))) r))

\func n''<=sucn'' {n : Nat} : LessOrEq'' n (suc n)
  | {0}     => <=-step (<=-refl idp)
  | {suc _} => sucn''<=sucm'' n''<=sucn''

\func sucn''<=m'' {n m : Nat} (p : LessOrEq'' (suc n) m) : LessOrEq'' n m
  | {0}    , {0}    , <=-refl p => absurd (transport Z (inv p) unit)
  | {0}    , {suc _}, <=-step p => <=-step (sucn''<=m'' p)
  | {0}    , {suc _}, <=-refl p => <=-step (<=-refl (suc-inj p))
  | {suc _}, {0}    , <=-refl p => absurd (transport Z (inv p) unit)
  | {suc _}, {suc _}, <=-step p => sucn''<=sucm'' (sucn''<=m'' (sucn''<=m'' p))
  | {suc _}, {suc m}, <=-refl p => transport (\lam z => LessOrEq'' z (suc m)) (inv (suc-inj p)) n''<=sucn''

\func leq30 {n m : Nat} (p : LessOrEq'' n m) : lessOrEq n m
  | {0}    , {0}    , <=-refl _ => unit
  | {0}    , {suc _}, <=-step _ => unit
  | {0}    , {suc _}, <=-refl _ => unit
  | {suc _}, {0}    , <=-refl p => transport Z (inv p) unit
  | {suc _}, {suc _}, <=-step p => leq30 (sucn''<=m'' p)
  | {suc n}, {suc _}, <=-refl p => transport (lessOrEq n) (suc-inj p) n<=n

\data List (A : \Type)
  | nil
  | cons (x : A) (xs : List A)

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | cons x xs => {
    | here (p : x = a)
    | there (p : In a xs)
  }

-- remember that natural definition is unfun to work with
-- \data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)

--  c.......d
--  |.......|
--  q.......r
--  |.......|
--  a---p---b
\func hfill1 {A : \Type} {a b c d : A} (p : a = b) (q : a = c) (r : b = d)
  : \Pi (i : I) -> q @ i = r @ i
  => coe2 (\lam i => q @ i = r @ i) left p

--  c.......d
--  |       |
--  q       r
--  |       |
--  a---p---b
\func hcomp1 {A : \Type} {a b c d : A} (p : a = b) (q : a = c) (r : b = d) : c = d
  => hfill1 p q r right
--   => coe0 (\lam i => q @ i = r @ i) p
--   => repl (path (\lam i => q @ i = r @ i)) p
--   => \let w => path (\lam i => q @ i = r @ i)
--       \in f {=-to-Equiv w} p
